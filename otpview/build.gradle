plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    namespace 'com.sugarspoon.otpview'
    compileSdk 33

    defaultConfig {
        minSdk 24
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        buildConfigField "String", "CHANGELOG", "${generateChangelog()}"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.0'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'

    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation "androidx.compose.material:material:$material_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.github.evd-evanss'
            artifactId = 'otpview'
            version = '1.0.2'

            afterEvaluate {
                from components.release
            }
        }
    }
}

String generateChangelog() {
    println "Generating changelog.."
    //Get the last tag
    def lastTag = "git describe --tags --abbrev=0".execute().text.trim()
    //Get all the commits since the last tag
    def gitLogCmd = "git log $lastTag..HEAD --oneline --no-merges --pretty=format:\"%s\"".execute().text.trim()
    //Loop each line of the commits to build your changelog
    def changelog = "\""
    gitLogCmd.eachLine { line ->
        //Remove surrounding quotation marks generated by the git log comand
        def escapedLine = line.substring(1, line.length() - 1)
        //Escape backslashes
        escapedLine = escapedLine.replaceAll(/(\\)/, "\\/")
        //Escape quotation marks
        escapedLine = escapedLine.replaceAll('"', '\\\\"')
        //Add each item to the changelog as a bullet point
        changelog += "â€¢ $escapedLine \\n"
    }
    //Close the changelog string
    changelog = (changelog + "\"").trim()
    //Useful log so you can see what was generated in the Gradle output
    println "Changelog generated, $changelog, from $lastTag to now."
    return changelog
}